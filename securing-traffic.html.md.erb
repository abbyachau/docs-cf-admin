---
title: Securing Traffic into Cloud Foundry
owner: Routing
---

<strong><%= modified_date %></strong>

This topic describes the options for securing traffic into your <%=vars.product_full%> <%=vars.product_abbr%> deployment with SSL/TLS certificates. You can configure your deployment to specify where to terminate TLS depending on your needs. 

<%=vars.ssl_config%>

## <a id="prereqs"></a> Prerequisites

This section lists the requirements for setting up SSL/TLS termination in your <%=vars.product_full%> <%=vars.product_abbr%> deployment.

### <a id="gorouter_requirements"></a> Gorouter Requirements

The Gorouter only supports HTTP requests. Whatever configuration you choose for securing traffic, it must result in the Gorouter receiving HTTP requests.

For more information on features of HTTP routing handled by the Cloud Foundry Gorouter, see the [HTTP Routing](../concepts/http-routing.html) topic.

### <a id="certtypes"></a> Certificate Requirements

* You must obtain a SSL/TLS certificate. 
  * In a production environment, use a signed SSL/TLS certificate from a known certificate authority (CA).
  * In a development or testing environment, you may use a self-signed certificate generated with `openssl` or a similar tool.
* The Gorouter currently only supports configuring a single HTTPS certificate. To associate multiple domains, including wildcard domains, to a single certificate, use [Subject Alternative Name](https://tools.ietf.org/html/rfc5280#section-4.2.1.6), an X.509 extension.

##<a id="ssl_options"></a> SSL/TLS Termination Options

There are three options for terminating SSL/TLS in <%=vars.product_short%>. You can terminate TLS at any of the following points:

1. Gorouter only
1. Load Balancer and Gorouter
1. Load Balancer only

###<a id="gorouter_term"></a> Gorouter Only

In this configuration, the load balancer does not terminate TLS for CF domains at all. Instead, it passes through the underlying TCP connection to the Gorouter. This is the more performant option, establishing and terminating a single TLS connection. The certificate on the Gorouter must be associated with the correct hostname so that HTTPS can validate the request, and signed by a trusted CA.

<p class='note'><strong>Note</strong>: This is the recommended approach.</p>
<%= image_tag("pass-through.png") %>

Traffic between the load balancer and the Gorouter is encrypted only if the client request is encrypted.

The Gorouter appends the X-Forwarded-For and X-Forwarded-Proto headers to requests forwarded to applications and platform system components. X-Forwarded-For is set to the IP address of the client, and X-Forwarded-Proto to the scheme of the client request.

###<a id="lb_and_gorouter_term"></a> Load Balancer and Gorouter

In this configuration, CF establishes and terminates two TLS connections: one from the client to the load balancer, and another from the load balancer to the Gorouter. This configuration secures all traffic between the load balancer and the Gorouter.

This option is less performant, but it does allow for multiple certificates to be used, meaning multiple domains can be verified when using HTTPS. 

Certificates for the CF domains must be stored on the load balancer and, if hostname validation is enabled, on the Gorouter (using a single certificate). The certificate on the Gorouter only needs to be trusted by the load balancer, and the domain does not need to match the request as long as hostname verification is not enabled on the load balancer.

<%= image_tag("lb-and-router.png") %>

The advantages of securing the connection between your load balancer and Gorouter instances include:

* A high level of security.
* The ability to secure a deployment that shares a load balancer with other deployments.
* The ability to manage certificates as part of your deployment manifest, which eliminates the need for out-of-band configuration of your load balancer.

If you terminate SSL/TLS at your load balancer, then you must also configure the load balancer to append the `X-Forwarded-For` and `X-Forwarded-Proto` HTTP headers to the HTTP traffic it passes to the Gorouter.

<p class='note'><strong>Note</strong>: Hostname verification between the load balancer and Gorouter is unnecessary when the load balancer is already configured with the Gorouter's IP address to correctly route the request. If DNS resolution is being used by the load balancer to route requests to the Gorouters, you should enable hostname verification.</p>

###<a id="lb_term"></a> Load Balancer Only

In this configuration, your load balancer terminates TLS, and passes unencrypted traffic to the Gorouter, which routes it to your app. Traffic between the load balancer and the Gorouter is not encrypted.

<%= image_tag("lb.png") %>

## <a id="procedures"></a> Procedures: Configuring TLS/SSL Termination

This section provides step-by-step procedures for setting up TLS/SSL Termination for your <%=vars.product_short%>deployment.

<%=vars.ssl_config%>

### <a id="pass-through"></a> Gorouter Only

To enable this configuration, perform the following steps:

1. Configure your load balancer to pass through requests from the client to the Gorouter.
1. Insert the certificate into your deployment manifest for the Gorouter:
    1. Use `bosh edit deployment` to open your release manifest for editing.
    1. Copy the contents of your certificate file into the `properties.Gorouter.ssl_cert` field and the contents of the private key file associated with your certificate into the `properties.router.ssl_key` field. Set `enable_ssl` to `true`.

        ```
        properties:
          router:
            ssl_cert: |
              -----BEGIN CERTIFICATE-----
              SSL_CERTIFICATE_SIGNED_BY_PRIVATE_KEY
              -----END CERTIFICATE-----
            ssl_key: |
              -----BEGIN RSA PRIVATE KEY-----
              RSA_PRIVATE_KEY
              -----END RSA PRIVATE KEY-----
            enable_ssl: true
        ```

### <a id="lb-and-router"></a> Load Balancer and Gorouter

To enable this configuration, perform the following steps:

1. Add your certificate to your load balancer and configure its listening port. The procedures vary depending on your IaaS.
1. Configure your load balancer to append the `X-Forwarded-For` and `X-Forwarded-Proto` headers to client requests.

    <br/>If the load balancer cannot be configured to provide the `X-Forwarded-For` header, the Gorouter will append it in requests forwarded to applications and system components, set to the IP address of the load balancer.

    <p class='note'><strong>Note</strong>: If the load balancer accepts unencrypted requests, it <strong>must</strong> provide the X-Forwarded-Proto header. Conversely, if the load balancer cannot be configured to send the X-Forwarded-Proto header it should not accept unencrypted requests. Otherwise, applications and platform system components that require encrypted client requests will accept unencrypted requests when they shouldn't.</p>

1. Insert the certificate into your deployment manifest for the Gorouter:
    1. Use `bosh edit deployment` to open your release manifest for editing.
    1. Copy the contents of your certificate file into the `properties.router.ssl_cert` field and the contents of the private key file associated with your certificate into the `properties.router.ssl_key` field. Set `enable_ssl` to `true`.

        ```
        properties:
          router:
            ssl_cert: |
              -----BEGIN CERTIFICATE-----
              SSL_CERTIFICATE_SIGNED_BY_PRIVATE_KEY
              -----END CERTIFICATE-----
            ssl_key: |
              -----BEGIN RSA PRIVATE KEY-----
              RSA_PRIVATE_KEY
              -----END RSA PRIVATE KEY-----
            enable_ssl: true
        ```
1. If your CF deployment uses a self-signed certificate, the client needs to install only the certificate stored on the load balancer.</p>

### <a id="lb"></a> Load Balancer Only

To enable this configuration, you must perform the following steps:

1. Configure your load balancer to append the `X-Forwarded-For` and `X-Forwarded-Proto` headers to client requests.
    * If the load balancer cannot be configured to provide the `X-Forwarded-For` header, the Gorouter appends it in requests forwarded to applications and system components, set to the IP address of the load balancer.
    *  <strong>Important:</strong> Configure the load balancer to forward the `X-Forwarded-Proto` header. If you fail to configure this forwarding, requests to some applications and system components result in redirect loops, as some requests determined to be unencrypted are redirected to HTTPS.</p>

1. Add your certificate to your load balancer and configure its listening port. The procedures vary depending on your IaaS.




